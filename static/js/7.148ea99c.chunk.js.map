{"version":3,"sources":["views/Airdrop/AirdroppoolTab.tsx","views/Airdrop/StyledCard.tsx","views/Airdrop/StyledCardHeader.tsx","views/Airdrop/AirdropInfoRow.tsx","views/Airdrop/AirdropEarnRow.tsx","views/Airdrop/CardFooter/ExpandedFooter.tsx","views/Airdrop/CardFooter/Footer.tsx","views/Airdrop/Modals/CollectModal.tsx","hooks/useAirdropReward.ts","views/Airdrop/CardActions/HarvestActions.tsx","views/Airdrop/CardActions/CardActions.tsx","views/Airdrop/Airdroppoolcard.tsx","views/Airdrop/Airdroppools.tsx","views/Airdrop/Airdroppoolsagent.tsx","views/Airdrop/Airdropwrapper.tsx","components/Balance.tsx","components/Tags.tsx","components/UnlockButton.tsx","components/layout/Flex.tsx","hooks/usePersistState.ts","components/FarmsPageHeader/FarmsPageHeader.tsx"],"names":["AirdroppoolTab","showFinished","setShowFinished","showRewarded","setShowRewarded","hasRewardedInFinishedPools","t","useTranslation","alignItems","justifyContent","mb","flexDirection","activeIndex","onItemClick","index","scale","variant","show","mt","ml","checked","onChange","prev","StyledCard","styled","Card","isFinished","theme","colors","mediaQueries","sm","StyledCardInner","Box","card","background","radii","Wrapper","CardHeader","backgroundDisabled","gradients","StyledCardHeader","rewardTokenSymbol","isRewarded","color","div","AirdropInfoRow","airdropCount","baseAirdropAmount","dropSupply","mr","AirdropEarnRow","inviteRewardRatio","userAirdropAmount","userInviterAmount","userInviterCount","ExpandedWrapper","Flex","ExpandedFooter","rewardToken","hasAirdropCount","hasAirdropAmount","account","shouldShowBlockCountdown","blocksRemaining","Math","max","small","Balance","fontSize","value","symbol","width","height","decimals","React","memo","ExpandableButtonWrapper","Footer","pool","useState","isExpanded","setIsExpanded","expanded","onClick","info","CollectModal","invitor","id","minDropAmount","maxDropAmount","onDismiss","useTheme","useToast","toastSuccess","toastError","callback","_invitor","useWeb3React","library","dispatch","useAppDispatch","chainId","getENVChainId","airdropContract","useAirdropContract","ADDRESS0","useUserDeadline","deadline","deadlineForSignature","ceil","Date","now","useCallback","a","console","error","airdrop","getAirdrops","find","p","nonces","nonce","EIP712Domain","name","type","domain","version","verifyingContract","address","reward","message","toHexString","data","JSON","stringify","types","primaryType","send","then","splitSignature","signature","v","r","s","gasLimit","DEFAULT_GAS_LIMIT","fetchAirdropsUserDataAsync","fetchAirdropsDataAsync","catch","useAirdropReward","setPendingTx","onReward","pendingTx","handleHarvestConfirm","title","headerBackground","cardHeader","isLoading","endIcon","spin","pb","HarvestActions","sgeOffset","useModal","onPresentCollect","InlineText","Text","CardActions","harvest","userData","display","textTransform","bold","query","window","location","search","substring","indexOf","hash","split","vars","i","length","pair","getQueryVariable","Airdroppoolcard","ribbon","variantColor","text","UnlockButton","Syruppools","pools","useAirdropPools","usePersistState","useMemo","partition","finishedPools","livePools","rewardedFinishedPools","filter","rewardedLivePools","FarmsPageHeader","as","Page","orderBy","map","Airdroppoolsagent","useFetchAirdropData","Airdroppools","Airdropwrapper","RefreshContext","isDisabled","unit","props","previousValue","useRef","useEffect","current","start","end","duration","separator","defaultProps","CoreTag","outline","startIcon","CommunityTag","ManualPoolTag","CompoundingPoolTag","useAuth","login","logout","useActiveWeb3React","activeChainId","onPresentConnectModal","useWalletModal","FlexLayout","initialValue","localStorageKey","valueFromLS","localStorage","getItem","parse","setValue","setItem","Outer","bubblegum","Inner","Container","children"],"mappings":"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","file":"static/js/7.148ea99c.chunk.js","sourcesContent":["import React from 'react'\nimport {\n  ButtonMenu,\n  ButtonMenuItem,\n  Toggle,\n  Text,\n  Flex,\n  NotificationDot,\n} from 'uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nconst AirdroppoolTab = ({ showFinished, setShowFinished, showRewarded, setShowRewarded, hasRewardedInFinishedPools }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"center\" mb=\"32px\">\n      <Flex alignItems=\"center\" flexDirection={['column', null, 'row', null]}>\n        <ButtonMenu activeIndex={showFinished ? 1 : 0} onItemClick={(index) => setShowFinished(index === 1)} scale=\"sm\" variant=\"subtle\">\n          <ButtonMenuItem>\n            {t('Live')}\n          </ButtonMenuItem>\n\n          <NotificationDot show={hasRewardedInFinishedPools}>\n            <ButtonMenuItem>\n               {t('Finished')}\n            </ButtonMenuItem>\n          </NotificationDot>\n        </ButtonMenu>\n\n        <Flex mt={['4px', null, 0, null]} ml={[0, null, '24px', null]} justifyContent=\"center\" alignItems=\"center\">\n          <Toggle scale=\"sm\" checked={showRewarded} onChange={() => setShowRewarded((prev) => !prev)} />\n          <Text ml=\"8px\">{t('Rewarded only')}</Text>\n        </Flex>\n      </Flex>\n    </Flex>\n  )\n}\n\nexport default AirdroppoolTab\n","import styled from 'styled-components'\nimport { Card, Box } from 'uikit'\n\nexport const StyledCard = styled(Card)<{ isFinished?: boolean }>`\n  max-width: 352px;\n  margin: 0 8px 24px;\n  display: flex;\n  flex-direction: column;\n  align-self: baseline;\n  position: relative;\n  color: ${({ isFinished, theme }) => theme.colors[isFinished ? 'textDisabled' : 'secondary']};\n  box-shadow: 0px 1px 4px rgba(25, 19, 38, 0.15);\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin: 0 12px 46px;\n  }\n`\n\nexport const StyledCardInner = styled(Box)`\n  background: ${({ theme }) => theme.card.background};\n  border-radius: ${({ theme }) => (theme.radii.card)};\n`\n\nexport default StyledCard\n","import React from 'react'\nimport { CardHeader, Heading, Flex } from 'uikit'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\n\nconst Wrapper = styled(CardHeader)<{ isFinished?: boolean; background?: string; }>`\n  background: ${({ isFinished, background, theme }) =>\n    isFinished ? theme.colors.backgroundDisabled : theme.colors.gradients[background]};\n  border-radius: ${({ theme }) =>\n    `${theme.radii.card} ${theme.radii.card} 0 0`};\n`\n\nconst StyledCardHeader: React.FC<{\n  rewardTokenSymbol: string\n  isFinished?: boolean\n  isRewarded?: boolean\n}> = ({\n  rewardTokenSymbol,\n  isFinished = false,\n  isRewarded = false\n}) => {\n  const { t } = useTranslation()\n \n  const background = isRewarded ? 'bubblegum' : 'cardHeader'\n\n  const getHeadingPrefix = () => {\n    // all other pools\n    return `${t('Earn')}`\n  }\n\n  return (\n    <Wrapper isFinished={isFinished} background={background}>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\">\n        <Flex flexDirection=\"column\">\n          <Heading color={isFinished ? 'textDisabled' : 'body'} scale=\"lg\">\n            {`${getHeadingPrefix()} ${rewardTokenSymbol}`}\n          </Heading>\n        </Flex>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default StyledCardHeader\n","import React from 'react'\nimport { Flex, Text } from 'uikit'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\n\nconst Wrapper = styled.div`\n  margin-top: 10px;\n  margin-bottom: 10px;\n`\n\ninterface AirdropInfoRowProps {\n  airdropCount: number, \n  baseAirdropAmount: number, \n}\n\nconst AirdropInfoRow: React.FC<AirdropInfoRowProps> = ({\n  airdropCount = 0, \n  baseAirdropAmount = 0, \n}) => {\n  const { t } = useTranslation()\n\n  const dropSupply = baseAirdropAmount * airdropCount\n\n  return (\n    <Wrapper>\n      <Flex justifyContent=\"space-between\" mb='5px'>\n        <Text ml='5px'>{t('AirdropSupply')}:</Text>\n        <Text mr='5px'>{dropSupply}</Text>\n      </Flex>\n      <Flex justifyContent=\"space-between\" mb='5px'>\n        <Text ml='5px'>{t('AirdropCounts')}:</Text>\n        <Text mr='5px'>{airdropCount}</Text>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default AirdropInfoRow\n","import React from 'react'\nimport { Flex, Text } from 'uikit'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\n\nconst Wrapper = styled.div`\n  margin-top: 24px;\n  margin-bottom: 10px;\n`\n\ninterface AirdropEarnRowProps {\n  inviteRewardRatio:number, \n  userAirdropAmount: number, \n  userInviterAmount: number, \n  userInviterCount: number\n}\n\nconst AirdropEarnRow: React.FC<AirdropEarnRowProps> = ({\n  inviteRewardRatio = 0, \n  userAirdropAmount = 0, \n  userInviterAmount = 0,\n  userInviterCount = 0\n}) => {\n  const { t } = useTranslation()\n\n  return (\n    <Wrapper>\n      <Flex justifyContent=\"space-between\" mb='5px'>\n        <Text ml='5px'>{t('AirdropRewards')}:</Text>\n        <Text mr='5px'>{userAirdropAmount}</Text>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default AirdropEarnRow\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Token } from 'sdk'\nimport { useTranslation } from 'contexts/Localization'\nimport {\n  Flex,\n  Text,\n  Skeleton \n} from 'uikit'\nimport Balance from 'components/Balance'\n\ninterface ExpandedFooterProps {\n  rewardToken: Token,\n  airdropCount: number, \n  hasAirdropCount: number, \n  hasAirdropAmount: number,\n  account: string\n}\n\nconst ExpandedWrapper = styled(Flex)`\n  svg {\n    height: 14px;\n    width: 14px;\n  }\n`\nconst ExpandedFooter: React.FC<ExpandedFooterProps> = ({\n  rewardToken,\n  airdropCount, \n  hasAirdropCount, \n  hasAirdropAmount,\n  account\n}) => {\n  const { t } = useTranslation()\n\n  const shouldShowBlockCountdown = airdropCount && (airdropCount !== hasAirdropCount)\n\n  const blocksRemaining = airdropCount ? Math.max(airdropCount - hasAirdropCount, 0) : 0\n\n  function getInvitorUrl():string  \n  {\n     return `${window.location.protocol}://${window.location.host}/#/sgeAirdrop?invitor=${account}`;\n  }\n\n  return (\n    <ExpandedWrapper flexDirection=\"column\">\n      <Flex mb=\"2px\" justifyContent=\"space-between\" alignItems=\"center\">\n        <Text small>{t('Total airdrop')}:</Text>\n        <Flex alignItems=\"flex-start\">\n          {hasAirdropAmount ? (\n            <>\n              <Balance\n                fontSize=\"14px\"\n                value={hasAirdropAmount}\n              />\n              <Text ml=\"4px\" fontSize=\"14px\">\n                {rewardToken.symbol}\n              </Text>\n            </>\n          ) : (\n            <Skeleton width=\"90px\" height=\"21px\" />\n          )}\n        </Flex>\n      </Flex>\n      {shouldShowBlockCountdown && (\n        <Flex mb=\"2px\" justifyContent=\"space-between\" alignItems=\"center\">\n          <Text small>{t('End')}:</Text>\n          <Flex alignItems=\"center\">\n            {blocksRemaining ? (\n              <Balance\n                color=\"primary\"\n                fontSize=\"14px\"\n                value={blocksRemaining}\n                decimals={0}\n              />\n            ) : (\n              <Skeleton width=\"54px\" height=\"21px\" />\n            )}\n            <Text ml=\"4px\" color=\"primary\" small>\n              {t('AirdropRemainingCounts')}\n            </Text>\n          </Flex>\n        </Flex>\n      )}\n\n    </ExpandedWrapper>\n  )\n}\n\nexport default React.memo(ExpandedFooter)\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { Flex, CardFooter, ExpandableLabel } from 'uikit'\nimport { AirdropPool } from 'state/types'\nimport { ManualPoolTag } from 'components/Tags'\nimport ExpandedFooter from './ExpandedFooter'\n\ninterface FooterProps {\n  pool: AirdropPool,\n  account:string\n}\n\nconst ExpandableButtonWrapper = styled(Flex)`\n  align-items: center;\n  justify-content: space-between;\n  button {\n    padding: 0;\n  }\n`\n\nconst Footer: React.FC<FooterProps> = ({\n  pool, account\n}) => {\n  const { t } = useTranslation()\n  \n  const [isExpanded, setIsExpanded] = useState(false)\n\n  return (\n    <CardFooter>\n      <ExpandableButtonWrapper>\n        <Flex alignItems=\"center\">\n          <ManualPoolTag />\n        </Flex>\n        <ExpandableLabel expanded={isExpanded} onClick={() => setIsExpanded(!isExpanded)}>\n          {isExpanded ? t('Hide') : t('Details')}\n        </ExpandableLabel>\n      </ExpandableButtonWrapper>\n      {isExpanded && (\n        <ExpandedFooter\n          rewardToken={pool.rewardToken}\n          airdropCount={pool.info?.airdropCount}\n          hasAirdropCount={pool.info?.hasAirdropCount}\n          hasAirdropAmount={pool.info?.hasAirdropAmount}\n          account={account}\n        />\n      )}\n    </CardFooter>\n  )\n}\n\nexport default Footer\n","import React, { useState } from 'react'\n\nimport {\n  Modal,\n  Text,\n  Button,\n  Flex,\n  AutoRenewIcon,\n} from 'uikit'\n\nimport { useTranslation } from 'contexts/Localization'\n\nimport useTheme from 'hooks/useTheme'\n\nimport useAirdropReward from 'hooks/useAirdropReward'\n\nimport useToast from 'hooks/useToast'\n\ninterface CollectModalProps {\n  invitor: string\n  id: number,\n  rewardTokenSymbol: string,\n  minDropAmount: number,\n  maxDropAmount:number,\n  onDismiss?: () => void\n}\n\nconst CollectModal: React.FC<CollectModalProps> = ({\n  invitor,\n  id,\n  rewardTokenSymbol,\n  minDropAmount,\n  maxDropAmount,\n  onDismiss,\n}) => {\n  const { t } = useTranslation()\n\n  const { theme } = useTheme()\n\n  const { toastSuccess, toastError } = useToast()\n\n  const rewardCallBack = () =>\n  {\n    toastSuccess(`${t('Harvested')}!`, t(`Your earnings have been sent to your wallet!`))\n    \n    setPendingTx(false)\n    \n    onDismiss()\n  }\n\n  const [ onReward ] = useAirdropReward(id, rewardCallBack, invitor)\n\n  const [pendingTx, setPendingTx] = useState(false)\n\n  const handleHarvestConfirm = async () => {\n    setPendingTx(true)\n\n      // harvesting\n      try {\n        await onReward()\n\n      } catch (e) {\n        toastError(t('Canceled'), t('Please try again and confirm the transaction.'))\n        setPendingTx(false)\n      }\n  }\n\n  return (\n    <Modal\n      title={`${rewardTokenSymbol} ${t('Harvest')}`}\n      onDismiss={onDismiss}\n      headerBackground={theme.colors.gradients.cardHeader}\n    >\n          <Flex justifyContent=\"space-between\" mb='10px'>\n             <Text ml='10px'>{t('AirdropEarnMin')}:</Text>\n             <Text mr='10px'>{minDropAmount}</Text>\n            </Flex>\n            <Flex justifyContent=\"space-between\" mb='10px'>\n             <Text ml='10px'>{t('AirdropEarnMax')}:</Text>\n             <Text mr='10px'>{maxDropAmount}</Text>\n            </Flex>\n\n      <Button\n        mt=\"8px\"\n        onClick={handleHarvestConfirm}\n        isLoading={pendingTx}\n        endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n      >\n        {pendingTx ? t('Confirming') : t('Confirm')}\n      </Button>\n      <Button variant=\"text\" onClick={onDismiss} pb=\"0px\">\n        {t('Close window')}\n      </Button>\n    </Modal>\n  )\n}\n\nexport default CollectModal\n","import { getENVChainId, ADDRESS0, DEFAULT_GAS_LIMIT } from 'sdk'\nimport { splitSignature } from '@ethersproject/bytes'\nimport getAirdrops from 'sdk/airdrops'\nimport { useCallback } from 'react'\nimport { useAppDispatch } from 'state'\nimport { useWeb3React } from '@web3-react/core'\nimport { useUserDeadline } from 'state/user/hooks'\nimport { fetchAirdropsUserDataAsync, fetchAirdropsDataAsync } from 'state/actions'\nimport { useAirdropContract } from './useContract'\n\nexport default function useAirdropReward(\n  id, callback: any, _invitor?: string\n): [ () => Promise<void>] {\n  const { account, library } = useWeb3React()\n\n  const dispatch = useAppDispatch()\n\n  const chainId = getENVChainId()\n\n  const airdropContract = useAirdropContract(id)\n\n  if(!_invitor)\n  {\n    _invitor = ADDRESS0\n  }\n\n  const [deadline] = useUserDeadline()\n\n  const deadlineForSignature: number = Math.ceil(Date.now() / 1000) + deadline\n\n  const onReward = useCallback(async (): Promise<void> => {\n    if (!airdropContract) {\n      console.error('airdrop contract is null')\n\n      return\n    }\n\n    const airdrop = getAirdrops().find((p) => p.id === id)\n\n    const nonce = await airdropContract.nonces(account)\n\n    const EIP712Domain = [\n      { name: 'version', type: 'uint256' },\n      { name: 'chainId', type: 'uint256' },\n      { name: 'verifyingContract', type: 'address' }\n    ]\n\n    const domain = {\n      version: airdrop.version,\n      chainId,\n      verifyingContract: airdrop.address\n    }\n\n    const reward = [\n      { name: 'invitor', type: 'address' },\n      { name: 'nonce', type: 'uint256' },\n      { name: 'deadline', type: 'uint256' }\n    ]\n\n    const message = {\n      invitor: _invitor,\n      nonce: nonce.toHexString(),\n      deadline: deadlineForSignature,\n    }\n\n    const data = JSON.stringify({\n      types: {\n        EIP712Domain,\n        reward,\n      },\n      domain,\n      primaryType: 'reward',\n      message,\n    })\n\n    library\n      .send('eth_signTypedData_v4', [account, data])\n      .then(splitSignature)\n      .then((signature) => {\n        \n         const {v, r, s} = signature\n\n         airdropContract\n             .reward(_invitor, nonce.toHexString(), deadlineForSignature, v, r, s, { gasLimit: DEFAULT_GAS_LIMIT })\n             .then(() => {\n                      dispatch(fetchAirdropsUserDataAsync(account))\n                      dispatch(fetchAirdropsDataAsync()) \n                               callback()\n                              })\n                                       .catch((error: Error) => {\n                                         console.error('Failed to harvest token', error)\n                                         throw error\n                                 })\n                                })\n                           \n  }, [airdropContract, dispatch, id, account, _invitor, callback, library, deadlineForSignature, chainId])\n\n  return [ onReward ]\n}\n\n \n","import React from 'react'\nimport { Flex, Button, useModal, Skeleton, Text } from 'uikit'\nimport { AirdropPool } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport CollectModal from '../Modals/CollectModal'\n\ninterface HarvestActionsProps {\n  pool: AirdropPool\n  invitor?: string,\n  isLoading?: boolean\n}\n\nconst HarvestActions: React.FC<HarvestActionsProps> = ({\n  pool,\n  invitor,\n  isLoading = false\n}) => {\n  const { t } = useTranslation()\n\n  const baseAirdropAmount = pool.info?.baseAirdropAmount\n\n  const sgeOffset = pool.info?.sgeOffset\n\n  const minDropAmount = baseAirdropAmount - baseAirdropAmount * sgeOffset / 100\n\n  const maxDropAmount = baseAirdropAmount + baseAirdropAmount * sgeOffset / 100\n\n  const [onPresentCollect] = useModal(\n    <CollectModal\n      invitor={invitor}\n      id={pool.id}\n      minDropAmount={minDropAmount}\n      maxDropAmount={maxDropAmount}\n      rewardTokenSymbol={pool.rewardToken.symbol}\n    />,\n  )\n\n  return (\n    <Flex flexDirection=\"column\" mb=\"16px\">\n      <Flex justifyContent=\"space-between\" alignItems=\"center\">\n        <Flex flexDirection=\"column\">\n          {isLoading ? (\n            <Skeleton width=\"80px\" height=\"48px\" />\n          ) : (\n            <>\n            <Flex justifyContent=\"space-between\" mb='5px'>\n             <Text ml='5px'>{t('AirdropEarnMin')}:</Text>\n             <Text mr='5px'>{minDropAmount}</Text>\n            </Flex>\n            <Flex justifyContent=\"space-between\" mb='5px'>\n             <Text ml='5px'>{t('AirdropEarnMax')}:</Text>\n             <Text mr='5px'>{maxDropAmount}</Text>\n            </Flex>\n            </>\n          )}\n        </Flex>\n        <Flex>\n          <Button onClick={onPresentCollect}>\n            { t('Harvest')}\n          </Button>\n        </Flex>\n      </Flex>\n    </Flex>\n  )\n}\n\nexport default HarvestActions\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, Text, Box } from 'uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { AirdropPool } from 'state/types'\nimport HarvestActions from './HarvestActions'\n\nconst InlineText = styled(Text)`\n  display: inline;\n`\n\ninterface CardActionsProps {\n  pool: AirdropPool\n}\n\nconst CardActions: React.FC<CardActionsProps> = ({ pool }) => {\n  const { t } = useTranslation()\n\n  const remainingCount = (pool.info.airdropCount - pool.info.hasAirdropCount)\n\n  const harvest = (remainingCount > 0) && pool.userData && (pool.userData.userAirdropAmount === 0)\n\n  const isLoading = !pool.userData\n  \n  function getQueryVariable(name: string) : string \n  {\n       let query = window.location.search.substring(1)\n\n       if(query.indexOf('?') === -1)\n       {\n          query = window.location.hash.split(\"?\")[1]\n       }\n\n       if(!query)\n       {\n          return undefined\n       }\n\n       const vars = query.split(\"&\")\n\n       for (let i = 0; i < vars.length; i++) {\n          const pair = vars[i].split(\"=\")\n        \n          if(pair[0] === name)\n          {\n            return pair[1]\n          }\n       }\n\n       return undefined\n  }\n\n  return (\n    <Flex flexDirection=\"column\">\n      <Flex flexDirection=\"column\">\n        {harvest && (\n          <>\n            <Box display=\"inline\">\n              <InlineText color=\"secondary\" textTransform=\"uppercase\" bold fontSize=\"12px\">\n                {`${pool.rewardToken.symbol} `}\n              </InlineText>\n              <InlineText color=\"textSubtle\" textTransform=\"uppercase\" bold fontSize=\"12px\">\n                {t(`Earned`)}\n              </InlineText>\n            </Box>\n            <HarvestActions\n              invitor={getQueryVariable(\"invitor\")}\n              pool={pool}\n              isLoading={isLoading} \n            />\n          </>\n        )}\n      </Flex>\n    </Flex>\n  )\n}\n\nexport default CardActions\n","import React from 'react'\nimport { CardBody, Flex, Text, CardRibbon } from 'uikit'\nimport UnlockButton from 'components/UnlockButton'\nimport { useTranslation } from 'contexts/Localization'\nimport { AirdropPool } from 'state/types'\nimport { StyledCard, StyledCardInner } from './StyledCard'\nimport StyledCardHeader from './StyledCardHeader'\nimport AirdropInfoRow from './AirdropInfoRow'\nimport AirdropEarnRow from './AirdropEarnRow'\nimport CardFooter from './CardFooter/Footer'\nimport CardActions from './CardActions/CardActions'\n\nconst Airdroppoolcard: React.FC<{ pool: AirdropPool; account: string; }> = ({ pool, account }) => {\n  const { rewardToken, info, userData } = pool\n\n  const isFinished = info && info.airdropCount === info.hasAirdropCount\n\n  const isRewarded = userData && userData.userAirdropAmount > 0\n\n  const { t } = useTranslation()\n\n  return (\n    <StyledCard\n      isFinished={isFinished}\n      ribbon={isFinished && <CardRibbon variantColor=\"textDisabled\" text={`${t('Finished')}`} />}\n    >\n      <StyledCardInner>\n        <StyledCardHeader\n          isRewarded={isRewarded}\n          rewardTokenSymbol={rewardToken.symbol}\n          isFinished={isFinished}\n        />\n\n       <CardBody>\n        <AirdropInfoRow    \n           airdropCount={info.airdropCount}\n           baseAirdropAmount={info.baseAirdropAmount} />\n\n        <AirdropEarnRow \n          inviteRewardRatio={info.inviteRewardRatio}\n          userAirdropAmount={userData?.userAirdropAmount}\n          userInviterAmount={userData?.userInviterAmount}\n          userInviterCount={userData?.userInviterCount}/>\n\n         <Flex mt=\"24px\" flexDirection=\"column\">\n            {account ? (\n              <CardActions pool={pool} />\n            ) : (\n              <>\n                <Text mb=\"10px\" textTransform=\"uppercase\" fontSize=\"12px\" color=\"textSubtle\" bold>\n                  {t('Start Earning')}\n                </Text>\n                <UnlockButton />\n              </>\n            )}\n          </Flex>\n        </CardBody>\n\n        <CardFooter pool={pool} account={account}/>   \n      </StyledCardInner>\n    </StyledCard>\n  )\n}\n\nexport default Airdroppoolcard\n","import React, { useMemo } from 'react'\r\nimport FarmsPageHeader from 'components/FarmsPageHeader'\r\nimport Page from 'components/layout/Page'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Heading, Flex } from 'uikit'\r\nimport orderBy from 'lodash/orderBy'\r\nimport partition from 'lodash/partition'\r\nimport usePersistState from 'hooks/usePersistState'\r\nimport { useAirdropPools } from 'state/hooks'\r\nimport FlexLayout from 'components/layout/Flex'\r\nimport AirdroppoolTab from './AirdroppoolTab'\r\nimport Airdroppoolcard from './Airdroppoolcard'\r\n\r\nconst Syruppools: React.FC = () => {\r\n    const { t } = useTranslation()\r\n\r\n    const { account } = useWeb3React()\r\n\r\n    const pools = useAirdropPools(account)\r\n\r\n    const [showFinished, setShowFinished] = usePersistState(false, 'grampus_airdrop_pool_finished')\r\n\r\n    const [showRewarded, setShowRewarded] = usePersistState(false, 'grampus_airdrop_pool_rewarded')\r\n\r\n    const [finishedPools, livePools] = useMemo(\r\n      () => partition(pools, (pool) => pool.info.airdropCount === pool.info.hasAirdropCount),\r\n      [pools],\r\n    )\r\n\r\n    const rewardedFinishedPools = useMemo(\r\n      () => finishedPools.filter((pool) => pool.userData && (pool.userData.userAirdropAmount > 0 || pool.userData.userInviterCount > 0)),\r\n      [finishedPools],\r\n    )\r\n\r\n    const rewardedLivePools = useMemo(\r\n      () => livePools.filter((pool) => pool.userData && (pool.userData.userAirdropAmount > 0 || pool.userData.userInviterCount > 0)),\r\n      [livePools],\r\n    )\r\n\r\n    const hasRewardedInFinishedPools = rewardedFinishedPools.length > 0\r\n\r\n    return (\r\n      <>\r\n        <FarmsPageHeader>\r\n         <Flex justifyContent=\"space-between\" flexDirection={['column', null, 'row']}>\r\n            <Flex flexDirection=\"column\" mr={['8px', 0]}>\r\n              <Heading as=\"h1\" scale=\"xxl\" color=\"secondary\" mb=\"24px\">\r\n                {t('Airdrop Pools')}\r\n              </Heading>\r\n              <Heading scale=\"md\" color=\"text\">\r\n                {t('earn random amount of airdrop tokens')}\r\n              </Heading>\r\n            </Flex>\r\n          </Flex>\r\n        </FarmsPageHeader>\r\n        <Page>\r\n\r\n        <AirdroppoolTab\r\n          showFinished={showFinished}\r\n          setShowFinished={setShowFinished}\r\n          showRewarded={showRewarded}\r\n          setShowRewarded={setShowRewarded}\r\n          hasRewardedInFinishedPools={hasRewardedInFinishedPools}\r\n        />\r\n        { !showFinished ? <FlexLayout>\r\n            <> \r\n              {showRewarded\r\n                ? orderBy(rewardedLivePools, ['sortOrder']).map((pool) => (\r\n                    <Airdroppoolcard key={pool.id} pool={pool} account={account} />\r\n                  ))\r\n                : orderBy(livePools, ['sortOrder']).map((pool) => (\r\n                    <Airdroppoolcard key={pool.id} pool={pool} account={account} />\r\n                  ))}\r\n            </>\r\n        </FlexLayout>\r\n        : <FlexLayout> \r\n          <> \r\n          {showRewarded\r\n              ? orderBy(rewardedFinishedPools, ['sortOrder']).map((pool) => (\r\n                  <Airdroppoolcard key={pool.id} pool={pool} account={account} />\r\n                ))\r\n              : orderBy(finishedPools, ['sortOrder']).map((pool) => (\r\n                  <Airdroppoolcard key={pool.id} pool={pool} account={account} />\r\n                ))} \r\n           </>\r\n        </FlexLayout> }\r\n      </Page>\r\n      </>\r\n    )   \r\n}\r\n \r\nexport default Syruppools\r\n","import React from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useFetchAirdropData } from 'state/hooks'\r\nimport Airdroppools from './Airdroppools'\r\n\r\nconst Airdroppoolsagent : React.FC = () => {\r\n    const { account } = useWeb3React()\r\n\r\n    useFetchAirdropData(account)\r\n\r\n    return (\r\n     <>\r\n       <Airdroppools />\r\n     </>\r\n    );\r\n}\r\n\r\nexport default Airdroppoolsagent","import React from 'react'\r\nimport { RefreshContextProvider } from 'contexts/RefreshContext'\r\nimport Airdroppoolsagent from './Airdroppoolsagent'\r\n\r\nconst Airdropwrapper: React.FC = () => {\r\n    return (\r\n      <RefreshContextProvider>\r\n        <Airdroppoolsagent />\r\n      </RefreshContextProvider>\r\n    );\r\n}\r\n\r\nexport default Airdropwrapper","import React, { useEffect, useRef } from 'react'\nimport CountUp from 'react-countup'\nimport { Text } from 'uikit'\n\ninterface TextProps {\n  isDisabled?: boolean\n  fontSize?: string\n  color?: string\n  bold?: boolean\n}\n\ninterface BalanceProps extends TextProps {\n  value?: number\n  decimals?: number\n  unit?: string\n}\n\nconst Balance: React.FC<BalanceProps> = ({ value, fontSize, color, decimals, isDisabled, unit, bold, ...props }) => {\n  const previousValue = useRef(0)\n\n  useEffect(() => {\n    previousValue.current = value\n  }, [value])\n\n  return (\n    <Text bold={bold} color={isDisabled ? 'textDisabled' : color} fontSize={fontSize} {...props}>\n      <CountUp start={previousValue.current} end={value} decimals={decimals} duration={1} separator=\",\" />\n      {value && unit && <span>{unit}</span>}\n    </Text>\n  )\n}\n\nBalance.defaultProps = {\n  fontSize: '32px',\n  isDisabled: false,\n  color: 'text',\n  decimals: 3,\n}\n\nexport default Balance\n","import React from 'react'\nimport { Tag, VerifiedIcon, CommunityIcon, BinanceIcon, RefreshIcon, AutoRenewIcon } from 'uikit'\n\nconst CoreTag = (props) => (\n  <Tag variant=\"secondary\" outline startIcon={<VerifiedIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\n    Core\n  </Tag>\n)\n\nconst CommunityTag = (props) => (\n  <Tag variant=\"textSubtle\" outline startIcon={<CommunityIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\n    Community\n  </Tag>\n)\n\nconst BinanceTag = (props) => (\n  <Tag variant=\"binance\" outline startIcon={<BinanceIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\n    Binance\n  </Tag>\n)\n\nconst DualTag = (props) => (\n  <Tag variant=\"textSubtle\" outline {...props}>\n    Dual\n  </Tag>\n)\n\nconst ManualPoolTag = (props) => (\n  <Tag variant=\"secondary\" outline startIcon={<RefreshIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\n    Manual\n  </Tag>\n)\n\nconst CompoundingPoolTag = (props) => (\n  <Tag variant=\"success\" outline startIcon={<AutoRenewIcon width=\"18px\" color=\"success\" mr=\"4px\" />} {...props}>\n    Auto\n  </Tag>\n)\n\nexport { CoreTag, CommunityTag, BinanceTag, DualTag, ManualPoolTag, CompoundingPoolTag }\n","import React from 'react'\nimport { Button, useWalletModal } from 'uikit'\nimport { getENVChainId } from 'sdk'\nimport { useActiveWeb3React } from 'hooks'\nimport useAuth from 'hooks/useAuth'\nimport { useTranslation } from 'contexts/Localization'\n\nconst UnlockButton = (props) => {\n  const { t } = useTranslation()\n\n  const { login, logout } = useAuth()\n\n  const { chainId } = useActiveWeb3React()\n\n  const activeChainId = chainId ?? getENVChainId()\n\n  const { onPresentConnectModal } = useWalletModal(login, logout, t, activeChainId)\n\n  return (\n    <Button onClick={onPresentConnectModal} {...props}>\n      {t('Unlock Wallet')}\n    </Button>\n  )\n}\n\nexport default UnlockButton\n","import styled from 'styled-components'\n\nconst FlexLayout = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  & > * {\n    min-width: 280px;\n    max-width: 31.5%;\n    width: 100%;\n    margin: 0 8px;\n    margin-bottom: 32px;\n  }\n`\n\nexport default FlexLayout\n","import { useEffect, useState } from 'react'\n\n/**\n * Same as \"useState\" but saves the value to local storage each time it changes\n */\nconst usePersistState = (initialValue: any, localStorageKey: string) => {\n  const [value, setValue] = useState(() => {\n    try {\n      const valueFromLS = localStorage.getItem(localStorageKey)\n\n      return valueFromLS ? JSON.parse(valueFromLS) : initialValue\n    } catch (error) {\n      return initialValue\n    }\n  })\n\n  useEffect(() => {\n    localStorage.setItem(localStorageKey, JSON.stringify(value))\n  }, [value, localStorageKey])\n\n  return [value, setValue]\n}\n\nexport default usePersistState\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Box } from 'uikit'\nimport Container from '../layout/Container'\n\nconst Outer = styled(Box)<{ background?: string }>`\n  background: ${({ theme, background }) => background || theme.colors.gradients.bubblegum};\n`\n\nconst Inner = styled(Container)`\n  padding-top: 32px;\n  padding-bottom: 32px;\n`\n\nconst FarmsPageHeader: React.FC<{ background?: string }> = ({ background, children, ...props }) => (\n  <Outer background={background} {...props}>\n    <Inner>{children}</Inner>\n  </Outer>\n)\n\nexport default FarmsPageHeader\n"],"sourceRoot":""}