{"version":3,"sources":["components/PageHeader/SlippageToleranceSetting.tsx","components/PageHeader/TransactionDeadlineSetting.tsx","components/PageHeader/AudioSetting.tsx","components/PageHeader/SettingsModal.tsx","components/PageHeader/RecentTransactionsModal.tsx","components/PageHeader/index.tsx","views/Pool/index.tsx"],"names":["Option","styled","div","Options","theme","mediaQueries","sm","predefinedValues","label","value","SlippageToleranceSettings","t","useUserSlippageTolerance","userSlippageTolerance","setUserslippageTolerance","useState","setValue","error","setError","useEffect","rawValue","Number","isNaN","mb","alignItems","bold","QuestionHelper","text","mr","map","predefinedValue","variant","onClick","type","scale","step","min","placeholder","onChange","evt","inputValue","target","parseFloat","isWarning","fontSize","mt","color","Field","Input","TransactionDeadlineSetting","useUserDeadline","deadline","setDeadline","parseInt","ml","AudioSetting","useMatchBreakpoints","isSm","isXs","useAudioModeManager","audioPlay","toggleSetAudioMode","checked","defaultOnDismiss","SettingsModal","onDismiss","title","SlippageToleranceSetting","newTransactionsFirst","a","b","addedTime","RecentTransactionsModal","useActiveWeb3React","account","chainId","allTransactions","useAllTransactions","sortedRecentTransactions","useMemo","Object","values","filter","isTransactionRecent","sort","justifyContent","flexDirection","length","sortedRecentTransaction","hash","summary","receipt","status","icon","Loader","getRowStatus","href","getScanLink","StyledPageHeader","colors","borderColor","Details","PageHeader","description","children","useTranslation","useModal","onPresentSettings","onPresentRecentTransactions","width","Pool","useContext","ThemeContext","trackedTokenPairs","useTrackedTokenPairs","tokenPairsWithLiquidityTokens","tokens","liquidityToken","toV2LiquidityToken","liquidityTokens","tpwlt","useTokenBalancesWithLoadingIndicator","undefined","v2PairsBalances","fetchingV2PairBalances","liquidityTokensWithBalances","address","greaterThan","v2Pairs","usePairs","v2IsLoading","some","V2Pair","allV2PairsWithLiquidity","v2Pair","Boolean","activeIndex","id","as","Link","to","checkCurrencyId","getETH","gap","justify","style","padding","textAlign","pair","removeOnly"],"mappings":"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","file":"static/js/10.2e5b739c.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { Box, Button, Flex, Input, Text } from 'uikit'\nimport { useUserSlippageTolerance } from 'state/user/hooks'\nimport QuestionHelper from '../QuestionHelper'\n\nconst MAX_SLIPPAGE = 5000\nconst RISKY_SLIPPAGE_LOW = 50\nconst RISKY_SLIPPAGE_HIGH = 500\n\nconst Option = styled.div`\n  padding: 0 4px;\n`\n\nconst Options = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n\n  ${Option}:first-child {\n    padding-left: 0;\n  }\n\n  ${Option}:last-child {\n    padding-right: 0;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n  }\n`\n\nconst predefinedValues = [\n  { label: '0.1%', value: 0.1 },\n  { label: '0.5%', value: 0.5 },\n  { label: '1%', value: 1 },\n]\n\ntype SlippageToleranceSettingsModalProps = {\n  t: (fallback: string) => string\n}\n\nconst SlippageToleranceSettings = ({ t }: SlippageToleranceSettingsModalProps) => {\n  const [userSlippageTolerance, setUserslippageTolerance] = useUserSlippageTolerance()\n\n  const [value, setValue] = useState(userSlippageTolerance / 100)\n\n  const [error, setError] = useState<string | null>(null)\n  \n  const handleChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    const { value: inputValue } = evt.target\n    setValue(parseFloat(inputValue))\n  }\n\n  // Updates local storage if value is valid\n  useEffect(() => {\n    try {\n      const rawValue = value * 100\n      if (!Number.isNaN(rawValue) && rawValue > 0 && rawValue < MAX_SLIPPAGE) {\n        setUserslippageTolerance(rawValue)\n        setError(null)\n      } else {\n        setError(t('Enter a valid slippage percentage'))\n      }\n    } catch {\n      setError(t('Enter a valid slippage percentage'))\n    }\n  }, [value, setError, setUserslippageTolerance, t])\n\n  // Notify user if slippage is risky\n  useEffect(() => {\n    if (userSlippageTolerance < RISKY_SLIPPAGE_LOW) {\n      setError(t('Your transaction may fail'))\n    } else if (userSlippageTolerance > RISKY_SLIPPAGE_HIGH) {\n      setError(t('Your transaction may be frontrun'))\n    }\n  }, [userSlippageTolerance, setError, t])\n\n  return (\n    <Box mb=\"16px\">\n      <Flex alignItems=\"center\" mb=\"8px\">\n        <Text bold>{t('Slippage tolerance')}</Text>\n        <QuestionHelper\n          text={t(\n            'Your transaction will revert if the price changes unfavorably by more than this percentage.'\n          )}\n        />\n      </Flex>\n      <Options>\n        <Flex mb={['8px', '8px', 0]} mr={[0, 0, '8px']}>\n          {predefinedValues.map(({ label, value: predefinedValue }) => {\n            const handleClick = () => setValue(predefinedValue)\n\n            return (\n              <Option key={predefinedValue}>\n                <Button variant={value === predefinedValue ? 'primary' : 'tertiary'} onClick={handleClick}>\n                  {label}\n                </Button>\n              </Option>\n            )\n          })}\n        </Flex>\n        <Flex alignItems=\"center\">\n          <Option>\n            <Input\n              type=\"number\"\n              scale=\"lg\"\n              step={0.1}\n              min={0.1}\n              placeholder=\"5%\"\n              value={value}\n              onChange={handleChange}\n              isWarning={error !== null}\n            />\n          </Option>\n          <Option>\n            <Text fontSize=\"18px\">%</Text>\n          </Option>\n        </Flex>\n      </Options>\n      {error && (\n        <Text mt=\"8px\" color=\"failure\">\n          {error}\n        </Text>\n      )}\n    </Box>\n  )\n}\n\nexport default SlippageToleranceSettings\n","import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { Input, Text, Flex, Box } from 'uikit'\nimport { useUserDeadline } from 'state/user/hooks'\nimport QuestionHelper from '../QuestionHelper'\n\nconst Field = styled.div`\n  align-items: center;\n  display: inline-flex;\n\n  & > ${Input} {\n    max-width: 100px;\n  }\n`\n\ntype TransactionDeadlineSettingModalProps = {\n  t: (fallback: string) => string\n}\n\nconst TransactionDeadlineSetting = ({ t }: TransactionDeadlineSettingModalProps) => {\n  const [deadline, setDeadline] = useUserDeadline()\n  const [value, setValue] = useState(deadline / 60) // deadline in minutes\n  const [error, setError] = useState<string | null>(null)\n\n  const handleChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    const { value: inputValue } = evt.target\n    setValue(parseInt(inputValue, 10))\n  }\n\n  // Updates local storage if value is valid\n  useEffect(() => {\n    try {\n      const rawValue = value * 60\n      if (!Number.isNaN(rawValue) && rawValue > 0) {\n        setDeadline(rawValue)\n        setError(null)\n      } else {\n        setError(t('Enter a valid deadline'))\n      }\n    } catch {\n      setError(t('Enter a valid deadline'))\n    }\n  }, [value, setError, setDeadline, t])\n\n  return (\n    <Box mb=\"16px\">\n      <Flex alignItems=\"center\" mb=\"8px\">\n        <Text bold>{t('Transaction deadline')}</Text>\n        <QuestionHelper\n          text={t('Your transaction will revert if it is pending for more than this long.')}\n        />\n      </Flex>\n      <Field>\n        <Input type=\"number\" step=\"1\" min=\"1\" value={value} onChange={handleChange} />\n        <Text fontSize=\"14px\" ml=\"8px\">\n          {t(\"Minutes\")}\n        </Text>\n      </Field>\n      {error && (\n        <Text mt=\"8px\" color=\"failure\">\n          {error}\n        </Text>\n      )}\n    </Box>\n  )\n}\n\nexport default TransactionDeadlineSetting\n","import React from 'react'\nimport { Box, Flex, Text, PancakeToggle, useMatchBreakpoints } from 'uikit'\nimport { useAudioModeManager } from 'state/user/hooks'\n\ntype AudioSettingModalProps = {\n  t: (fallback: string) => string\n}\n\nconst AudioSetting = ({ t }: AudioSettingModalProps) => {\n  const { isSm, isXs } = useMatchBreakpoints()\n  const [audioPlay, toggleSetAudioMode] = useAudioModeManager()\n\n  return (\n    <Box mb=\"16px\">\n      <Flex alignItems=\"center\" mb=\"8px\">\n        <Text bold>{t('Audio')}</Text>\n      </Flex>\n      <Box>\n        <PancakeToggle scale={isSm || isXs ? 'sm' : 'md'} checked={audioPlay} onChange={toggleSetAudioMode} />\n      </Box>\n    </Box>\n  )\n}\n\nexport default AudioSetting\n","import React from 'react'\nimport { Modal } from 'uikit'\nimport SlippageToleranceSetting from './SlippageToleranceSetting'\nimport TransactionDeadlineSetting from './TransactionDeadlineSetting'\nimport AudioSetting from './AudioSetting'\n\ntype SettingsModalProps = {\n  onDismiss?: () => void\n  t: (fallback: string) => string\n}\n\n// TODO: Fix UI Kit typings\nconst defaultOnDismiss = () => null\n\nconst SettingsModal = ({ onDismiss = defaultOnDismiss, t }: SettingsModalProps) => {\n  return (\n    <Modal title={t('Settings')} onDismiss={onDismiss}>\n\n      <SlippageToleranceSetting t={t} />\n\n      <TransactionDeadlineSetting t={t} />\n\n      <AudioSetting t={t} />\n\n    </Modal>\n  )\n}\n\nexport default SettingsModal\n","import React, { useMemo } from 'react'\nimport { getScanLink } from 'sdk'\nimport { CheckmarkCircleIcon, ErrorIcon, Flex, LinkExternal, Text, Modal, Button } from 'uikit'\nimport { useActiveWeb3React } from 'hooks'\nimport { isTransactionRecent, useAllTransactions } from 'state/transactions/hooks'\nimport { TransactionDetails } from 'state/transactions/reducer'\nimport Loader from 'components/Loader'\n\ntype RecentTransactionsModalProps = {\n  onDismiss?: () => void\n  t: (fallback: string) => string\n}\n\n// TODO: Fix UI Kit typings\nconst defaultOnDismiss = () => null\n\nconst newTransactionsFirst = (a: TransactionDetails, b: TransactionDetails) => b.addedTime - a.addedTime\n\nconst getRowStatus = (sortedRecentTransaction: TransactionDetails) => {\n  const { hash, receipt } = sortedRecentTransaction\n\n  if (!hash) {\n    return { icon: <Loader />, color: 'text' }\n  }\n\n  if (hash && receipt?.status === 1) {\n    return { icon: <CheckmarkCircleIcon color=\"success\" />, color: 'success' }\n  }\n\n  return { icon: <ErrorIcon color=\"failure\" />, color: 'failure' }\n}\n\nconst RecentTransactionsModal = ({ onDismiss = defaultOnDismiss, t }: RecentTransactionsModalProps) => {\n  const { account, chainId } = useActiveWeb3React()\n\n  const allTransactions = useAllTransactions()\n\n  // Logic taken from Web3Status/index.tsx line 175\n  const sortedRecentTransactions = useMemo(() => {\n    const txs = Object.values(allTransactions)\n    return txs.filter(isTransactionRecent).sort(newTransactionsFirst)\n  }, [allTransactions])\n\n  return (\n    <Modal title={t('Recent transactions')} onDismiss={onDismiss}>\n      {!account && (\n        <Flex justifyContent=\"center\" flexDirection=\"column\" alignItems=\"center\">\n          <Text mb=\"8px\" bold>\n            {t(\"pctoseept\")}\n          </Text>\n          <Button variant=\"tertiary\" scale=\"sm\" mt=\"10px\" onClick={onDismiss}>\n            {t(\"Close\")}\n          </Button>\n        </Flex>\n      )}\n      {account && chainId && sortedRecentTransactions.length === 0 && (\n        <Flex justifyContent=\"center\" flexDirection=\"column\" alignItems=\"center\">\n          <Text mb=\"8px\" bold>\n            {t(\"No recent transactions\")}\n          </Text>\n          <Button variant=\"tertiary\" scale=\"sm\" mt=\"10px\" onClick={onDismiss}>\n            {t(\"Close\")}\n          </Button>\n        </Flex>\n      )}\n      {account &&\n        chainId &&\n        sortedRecentTransactions.map((sortedRecentTransaction) => {\n          const { hash, summary } = sortedRecentTransaction\n          const { icon, color } = getRowStatus(sortedRecentTransaction)\n\n          return (\n            <>\n              <Flex key={hash} alignItems=\"center\" justifyContent=\"space-between\" mb=\"4px\">\n                <LinkExternal href={getScanLink(chainId, hash, 'transaction')} color={color}>\n                  {summary ?? hash}\n                </LinkExternal>\n                {icon}\n              </Flex>\n            </>\n          )\n        })}\n    </Modal>\n  )\n}\n\nexport default RecentTransactionsModal\n","import React, { ReactNode } from 'react'\nimport styled from 'styled-components'\nimport { Heading, IconButton, Text, Flex, useModal, TuneIcon, HistoryIcon } from 'uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport SettingsModal from './SettingsModal'\nimport RecentTransactionsModal from './RecentTransactionsModal'\n\ninterface PageHeaderProps {\n  title: ReactNode\n  description?: ReactNode\n  children?: ReactNode\n}\n\nconst StyledPageHeader = styled.div`\n  border-bottom: 1px solid ${({ theme }) => theme.colors.borderColor};\n  padding: 24px;\n`\n\nconst Details = styled.div`\n  flex: 1;\n`\n\nconst PageHeader = ({ title, description, children }: PageHeaderProps) => {\n  const { t } = useTranslation()\n\n  const [onPresentSettings] = useModal(<SettingsModal t={t} />)\n \n  const [onPresentRecentTransactions] = useModal(<RecentTransactionsModal t={t} />)\n\n  return (\n    <StyledPageHeader>\n      <Flex alignItems=\"center\">\n        <Details>\n          <Heading mb=\"8px\">{title}</Heading>\n          {description && (\n            <Text color=\"textSubtle\" fontSize=\"14px\">\n              {description}\n            </Text>\n          )}\n        </Details>\n        <IconButton variant=\"text\" onClick={onPresentSettings} title={t('Settings')}>\n          <TuneIcon width=\"24px\" color=\"currentColor\" />\n        </IconButton>\n        <IconButton\n          variant=\"text\"\n          onClick={onPresentRecentTransactions}\n          title={t('Recent transactions')}\n        >\n          <HistoryIcon width=\"24px\" color=\"currentColor\" />\n        </IconButton>\n      </Flex>\n      {children && <Text mt=\"16px\">{children}</Text>}\n    </StyledPageHeader>\n  )\n}\n\nexport default PageHeader\n","import React, { useContext, useMemo } from 'react'\nimport { getETH } from 'sdk'\nimport { ThemeContext } from 'styled-components'\nimport Pair from 'sdk/entities/pair'\nimport { CardBody, Text, Button } from 'uikit'\nimport CardNav from 'components/CardNav'\nimport Question from 'components/QuestionHelper'\nimport Page from 'components/layout/Page'\nimport FullPositionCard from 'components/PositionCard'\nimport { useTokenBalancesWithLoadingIndicator } from 'state/wallet/hooks'\nimport { StyledInternalLink } from 'components/Shared'\nimport { LightCard } from 'components/Card'\nimport { RowBetween } from 'components/Row'\nimport { AutoColumn } from 'components/Column'\nimport Container from 'components/Container'\nimport { Link } from 'react-router-dom'\nimport { useActiveWeb3React } from 'hooks'\nimport { usePairs } from 'data/Reserves'\nimport { toV2LiquidityToken, useTrackedTokenPairs } from 'state/user/hooks'\nimport { Dots } from 'components/swap/styleds'\nimport { useTranslation } from 'contexts/Localization'\nimport PageHeader from 'components/PageHeader'\nimport { checkCurrencyId } from 'utils/currencyId'\nimport AppBody from '../AppBody'\n\nexport default function Pool() {\n  const theme = useContext(ThemeContext)\n  const { account } = useActiveWeb3React()\n\n  const { t } = useTranslation()\n\n  // fetch the user's balances of all tracked V2 LP tokens\n  const trackedTokenPairs = useTrackedTokenPairs()\n\n  const tokenPairsWithLiquidityTokens = useMemo(\n    () => trackedTokenPairs.map((tokens) => ({ liquidityToken: toV2LiquidityToken(tokens), tokens })),\n    [trackedTokenPairs]\n  )\n  const liquidityTokens = useMemo(() => tokenPairsWithLiquidityTokens.map((tpwlt) => tpwlt.liquidityToken), [\n    tokenPairsWithLiquidityTokens,\n  ])\n  const [v2PairsBalances, fetchingV2PairBalances] = useTokenBalancesWithLoadingIndicator(\n    account ?? undefined,\n\n    liquidityTokens\n  )\n\n  // fetch the reserves for all V2 pools in which the user has a balance\n  const liquidityTokensWithBalances = useMemo(\n    () =>\n      tokenPairsWithLiquidityTokens.filter(({ liquidityToken }) =>\n        v2PairsBalances[liquidityToken.address]?.greaterThan('0')\n      ),\n\n    [tokenPairsWithLiquidityTokens, v2PairsBalances]\n  )\n\n  const v2Pairs = usePairs(liquidityTokensWithBalances.map(({ tokens }) => tokens))\n  \n  const v2IsLoading =\n    fetchingV2PairBalances || v2Pairs?.length < liquidityTokensWithBalances.length || v2Pairs?.some((V2Pair) => !V2Pair)\n\n  const allV2PairsWithLiquidity = v2Pairs.map(([, pair]) => pair).filter((v2Pair): v2Pair is Pair => Boolean(v2Pair))\n\n  return (\n    <Page>\n    <Container>\n      <CardNav activeIndex={1} />\n      <AppBody>\n      <PageHeader\n          title={t('Liquidity')}\n          description={t('Add liquidity to receive LP tokens')}>\n          <Button id=\"join-pool-button\" mb=\"16px\" as={Link} to={`/add/${checkCurrencyId(getETH())}`}>  \n            {t(\"Add Liquidity\")}\n          </Button>\n        </PageHeader>\n        <AutoColumn gap=\"lg\" justify=\"center\">\n          <CardBody>\n            <AutoColumn gap=\"12px\" style={{ width: '100%' }}>\n              <RowBetween padding=\"0 8px\">\n                <Text color={theme.colors.text}>{t('Your Liquidity')}</Text>\n                <Question\n                  text={t(\"addtoseelp\")}\n                />\n              </RowBetween>\n\n              {!account ? (\n                <LightCard padding=\"40px\">\n                  <Text color=\"textDisabled\" textAlign=\"center\">\n                    {t('ctseelp')}\n                  </Text>\n                </LightCard>\n              ) : v2IsLoading ? (\n                <LightCard padding=\"40px\">\n                  <Text color=\"textDisabled\" textAlign=\"center\">\n                    <Dots>{t(\"Loading\")}</Dots>\n                  </Text>\n                </LightCard>\n              ) : allV2PairsWithLiquidity?.length > 0 ? (\n                <>\n                  {allV2PairsWithLiquidity.map((v2Pair) => (\n                    <FullPositionCard key={v2Pair.liquidityToken.address} pair={v2Pair} removeOnly />\n                  ))}\n                </>\n              ) : (\n                <LightCard padding=\"40px\">\n                  <Text color=\"textDisabled\" textAlign=\"center\">\n                    {t('No liquidity found')}.\n                  </Text>\n                </LightCard>\n              )}\n\n              <div>\n                <Text fontSize=\"14px\" style={{ padding: '.5rem 0 .5rem 0' }}>\n                  {t(\"Don't see a pool you joined\")}{'? '}\n                  <StyledInternalLink id=\"import-pool-link\" to=\"/find\">\n                    {t('Import it')}.\n                  </StyledInternalLink>\n                </Text>\n                <Text fontSize=\"14px\" style={{ padding: '.5rem 0 .5rem 0' }}>\n                  {t('unlocktoseelp')}\n                </Text>\n              </div>\n            </AutoColumn>\n          </CardBody>\n        </AutoColumn>\n      </AppBody>\n    </Container>\n    </Page>\n  )\n}\n"],"sourceRoot":""}