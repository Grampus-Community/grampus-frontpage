{"version":3,"sources":["views/PoolFinder/index.tsx"],"names":["Fields","PoolFinder","account","useActiveWeb3React","useState","showSearch","setShowSearch","TOKEN1","activeField","setActiveField","getETH","currency0","setCurrency0","currency1","setCurrency1","usePair","undefined","pairState","pair","addPair","usePairAdder","t","useTranslation","useEffect","validPairNoLiquidity","PairState","NOT_EXISTS","Boolean","EXISTS","JSBI","equal","reserve0","raw","BigInt","reserve1","position","useTokenBalance","liquidityToken","hasPosition","greaterThan","handleCurrencySelect","useCallback","currency","TOKEN0","handleSearchDismiss","prerequisiteMessage","padding","style","textAlign","activeIndex","gap","onClick","startIcon","marginRight","endIcon","width","color","symbol","justifyItems","backgroundColor","borderRadius","justify","to","checkCurrencyId","INVALID","LOADING","isOpen","onCurrencySelect","onDismiss","showCommonBases","selectedCurrency"],"mappings":"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","file":"static/js/13.c2983100.chunk.js","sourcesContent":["import { getETH, JSBI } from 'sdk'\nimport Currency from 'sdk/entities/currency'\nimport TokenAmount from 'sdk/entities/fractions/tokenAmount'\nimport React, { useCallback, useEffect, useState } from 'react'\nimport { Button, ChevronDownIcon, AddIcon, CardBody, Text } from 'uikit'\nimport CardNav from 'components/CardNav'\nimport { LightCard } from 'components/Card'\nimport { AutoColumn, ColumnCenter } from 'components/Column'\nimport Page from 'components/layout/Page'\nimport CurrencyLogo from 'components/CurrencyLogo'\nimport { FindPoolTabs } from 'components/NavigationTabs'\nimport { MinimalPositionCard } from 'components/PositionCard'\nimport CurrencySearchModal from 'components/SearchModal/CurrencySearchModal'\nimport { PairState, usePair } from 'data/Reserves'\nimport { useActiveWeb3React } from 'hooks'\nimport { usePairAdder } from 'state/user/hooks'\nimport { useTokenBalance } from 'state/wallet/hooks'\nimport { StyledInternalLink } from 'components/Shared'\nimport Container from 'components/Container'\nimport { checkCurrencyId } from 'utils/currencyId'\nimport { useTranslation } from 'contexts/Localization'\nimport AppBody from '../AppBody'\nimport { Dots } from '../Pool/styleds'\n\nenum Fields {\n  TOKEN0 = 0,\n  TOKEN1 = 1,\n}\n\nexport default function PoolFinder() {\n  const { account } = useActiveWeb3React()\n\n  const [showSearch, setShowSearch] = useState<boolean>(false)\n\n  const [activeField, setActiveField] = useState<number>(Fields.TOKEN1)\n\n  const [currency0, setCurrency0] = useState<Currency | null>(getETH())\n\n  const [currency1, setCurrency1] = useState<Currency | null>(null)\n\n  const [pairState, pair] = usePair(currency0 ?? undefined, currency1 ?? undefined)\n\n  const addPair = usePairAdder()\n\n  const { t } = useTranslation()\n\n  useEffect(() => {\n    if (pair) {\n      addPair(pair)\n    }\n  }, [pair, addPair])\n\n  const validPairNoLiquidity: boolean =\n    pairState === PairState.NOT_EXISTS ||\n    Boolean(\n      pairState === PairState.EXISTS &&\n        pair &&\n        JSBI.equal(pair.reserve0.raw, JSBI.BigInt(0)) &&\n        JSBI.equal(pair.reserve1.raw, JSBI.BigInt(0))\n    )\n\n  const position: TokenAmount | undefined = useTokenBalance(account ?? undefined, pair?.liquidityToken)\n  const hasPosition = Boolean(position && JSBI.greaterThan(position.raw, JSBI.BigInt(0)))\n\n  const handleCurrencySelect = useCallback(\n    (currency: Currency) => {\n      if (activeField === Fields.TOKEN0) {\n        setCurrency0(currency)\n      } else {\n        setCurrency1(currency)\n      }\n    },\n    [activeField]\n  )\n\n  const handleSearchDismiss = useCallback(() => {\n    setShowSearch(false)\n  }, [setShowSearch])\n\n  const prerequisiteMessage = (\n    <LightCard padding=\"45px 10px\">\n      <Text style={{ textAlign: 'center' }}>\n        {!account\n          ? t('Connect to a wallet to find pools')\n          : t('Select a Token to find your liquidity.')}\n      </Text>\n    </LightCard>\n  )\n\n  return (\n    <Page>\n    <Container>\n      <CardNav activeIndex={1} />\n      <AppBody>\n        <FindPoolTabs />\n        <CardBody>\n          <AutoColumn gap=\"md\">\n            <Button\n              onClick={() => {\n                setShowSearch(true)\n                setActiveField(Fields.TOKEN0)\n              }}\n              startIcon={currency0 ? <CurrencyLogo currency={currency0} style={{ marginRight: '.5rem' }} /> : null}\n              endIcon={<ChevronDownIcon width=\"24px\" color=\"white\" />}\n              width=\"100%\"\n            >\n              {currency0 ? currency0.symbol : t('Select a Token')}\n            </Button>\n\n            <ColumnCenter>\n              <AddIcon color=\"textSubtle\" />\n            </ColumnCenter>\n\n            <Button\n              onClick={() => {\n                setShowSearch(true)\n                setActiveField(Fields.TOKEN1)\n              }}\n              startIcon={currency1 ? <CurrencyLogo currency={currency1} style={{ marginRight: '.5rem' }} /> : null}\n              endIcon={<ChevronDownIcon width=\"24px\" color=\"white\" />}\n              width=\"100%\"\n            >\n              {currency1 ? currency1.symbol : t('Select a Token')}\n            </Button>\n\n            {hasPosition && (\n              <ColumnCenter\n                style={{ justifyItems: 'center', backgroundColor: '', padding: '12px 0px', borderRadius: '12px' }}\n              >\n                <Text style={{ textAlign: 'center' }}>{t('Pool found!')}</Text>\n              </ColumnCenter>\n            )}\n\n            {currency0 && currency1 ? (\n              pairState === PairState.EXISTS ? (\n                hasPosition && pair ? (\n                  <MinimalPositionCard pair={pair} />\n                ) : (\n                  <LightCard padding=\"45px 10px\">\n                    <AutoColumn gap=\"sm\" justify=\"center\">\n                      <Text style={{ textAlign: 'center' }}>\n                        {t('You donâ€™t have liquidity in this pool yet')}.\n                      </Text>\n                      <StyledInternalLink to={`/add/${checkCurrencyId(currency0)}/${checkCurrencyId(currency1)}`}>\n                        <Text style={{ textAlign: 'center' }}>{t('Add Liquidity')}</Text>\n                      </StyledInternalLink>\n                    </AutoColumn>\n                  </LightCard>\n                )\n              ) : validPairNoLiquidity ? (\n                <LightCard padding=\"45px 10px\">\n                  <AutoColumn gap=\"sm\" justify=\"center\">\n                    <Text style={{ textAlign: 'center' }}>{t('No pool found.')}</Text>\n                    <StyledInternalLink to={`/add/${checkCurrencyId(currency0)}/${checkCurrencyId(currency1)}`}>\n                      {t('Create pool')}\n                    </StyledInternalLink>\n                  </AutoColumn>\n                </LightCard>\n              ) : pairState === PairState.INVALID ? (\n                <LightCard padding=\"45px 10px\">\n                  <AutoColumn gap=\"sm\" justify=\"center\">\n                    <Text style={{ textAlign: 'center' }}>{t('Invalid pair.')}</Text>\n                  </AutoColumn>\n                </LightCard>\n              ) : pairState === PairState.LOADING ? (\n                <LightCard padding=\"45px 10px\">\n                  <AutoColumn gap=\"sm\" justify=\"center\">\n                    <Text style={{ textAlign: 'center' }}>\n                      {t('Loading')}\n                      <Dots />\n                    </Text>\n                  </AutoColumn>\n                </LightCard>\n              ) : null\n            ) : (\n              prerequisiteMessage\n            )}\n          </AutoColumn>\n\n          <CurrencySearchModal\n            isOpen={showSearch}\n            onCurrencySelect={handleCurrencySelect}\n            onDismiss={handleSearchDismiss}\n            showCommonBases\n            selectedCurrency={(activeField === Fields.TOKEN0 ? currency1 : currency0) ?? undefined}\n          />\n        </CardBody>\n      </AppBody>\n    </Container>\n    </Page>\n  )\n}\n"],"sourceRoot":""}